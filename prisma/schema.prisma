generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Anime {
  id                String        @id @default(cuid())
  slug              String?       @unique
  anilistId         Int           @unique
  coverImage        String?
  bannerImage       String?
  status            AiringStatus?
  season            AiringSeason  @default(UNKNOWN)
  title             Json
  mappings          Json          @default("{}")
  currentEpisode    Int?
  next              DateTime?
  synonyms          String[]
  lastEpisodeUpdate DateTime?
  seasonInt         Int?
  description       String?
  duration          Int?
  averageScore      Int?
  popularity        Int?
  color             String?
  year              Int?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  format            MediaFormat?  @default(UNKNOWN)
  linkedRelations   Relation[]    @relation("linkedRelations")
  relations         Relation[]    @relation("relations")
  episodes          Episode[]
  genre             Genre[]

  @@map("anime")
}

model Genre {
  id    String  @id @default(cuid())
  name  String  @unique
  anime Anime[]

  @@map("genre")
}

model Episode {
  id              String    @id @default(cuid())
  animeId         String
  number          Int
  title           String?
  image           String?
  introStart      Int?
  introEnd        Int?
  filler          Boolean?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  airedAt         DateTime?
  titleVariations Json?
  description     String?
  anime           Anime     @relation(fields: [animeId], references: [id], onDelete: Cascade)
  sources         Source[]

  @@unique([animeId, number])
  @@map("episode")
}

model Source {
  id         String     @id @default(cuid())
  target     String     @unique
  websiteId  String
  episodeId  String
  type       SourceType @default(DIRECT)
  referer    String?
  resolution String?
  format     String?
  browser    Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  episode    Episode    @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  website    Website    @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("source")
}

model Website {
  id       String   @id @default(cuid())
  name     String
  priority Int?     @default(-1)
  url      String   @unique
  subtitle Boolean  @default(false)
  locale   String
  sources  Source[]

  @@map("website")
}

model Relation {
  type      RelationType
  animeId   String
  id        String       @id @default(cuid())
  anime     Anime        @relation("linkedRelations", fields: [animeId], references: [id], onDelete: Cascade)
  linked    Anime[]      @relation("relations")

  @@unique([type, animeId])
  @@map("relation")
}

enum RelationType {
  PREQUEL
  SEQUEL
  PARENT
  SIDE_STORY
}

enum AiringStatus {
  FINISHED
  RELEASING
  NOT_YET_RELEASED
  CANCELLED
  HIATUS
}

enum AiringSeason {
  UNKNOWN
  SPRING
  SUMMER
  FALL
  WINTER
}

enum SourceType {
  DIRECT
  PROXY
}

enum MediaFormat {
  UNKNOWN
  TV
  TV_SHORT
  MOVIE
  SPECIAL
  OVA
  ONA
  MUSIC
}
